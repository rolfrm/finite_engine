import gfw
import types

class Drawable:
    def __init__(self, position, rotation,scale,polygon):
        self.Pos = position
        self.Rotation = rotation
        self.Poly = polygon
        self.Scale = scale

    def _Draw(self):
        s = gfw.GetActiveShader()
        s.SetUniform2f(self.Pos[0],self.Pos[1],"offset")
        s.SetUniform2f(self.Scale[0],self.Scale[1],"scale")
        s.SetUniform1f(self.Rotation,"rotation")
        self.Poly._Draw()


class Polygon:
    def __init__(self,verts,indexes=[],uvs = [],colors = []):
        self.verts = verts
        self.indexes = indexes
        if self.indexes == []:
            self.indexes = range(0,len(self.verts))
        self.uvs = uvs
        self.colors = colors
        self.changed = False
        self.instanciated = False
    def _Draw(self):
        if not self.instanciated:
            self.Poly = gfw.Polygon(gfw.FloatVector(self.verts),gfw.UIntVector(self.indexes),gfw.FloatVector(self.uvs),gfw.FloatVector(self.colors))
            self.instanciated = True
        
        
        self.Poly.Draw()

class Shader:
    def __init__(self,vs,fs):
        self.vs = vs
        self.fs = fs
        self.instanciated = False
        self.shader = 0
    def _Draw(self):
        if not self.instanciated:
            self.shader = gfw.Shader(self.vs,self.fs)
        gfw.SetActiveShader(self.shader)
    def __del__(self):
        print "Happens.."
        global shaderfordeletion
        if self.shader:
            shaderfordeletion = self.shader

ActiveDrawRutine = []


def _Draw():
    gfw.ClearBuffer()
    for i in ActiveDrawRutine:
        i._Draw()
    gfw.Refresh()
