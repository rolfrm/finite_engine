# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gfw', [dirname(__file__)])
        except ImportError:
            import _gfw
            return _gfw
        if fp is not None:
            try:
                _mod = imp.load_module('_gfw', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gfw = swig_import_helper()
    del swig_import_helper
else:
    import _gfw
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class VoxelGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoxelGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VoxelGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_VoxelGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["Grid"] = _gfw.VoxelGrid_Grid_set
    __swig_getmethods__["Grid"] = _gfw.VoxelGrid_Grid_get
    if _newclass:Grid = _swig_property(_gfw.VoxelGrid_Grid_get, _gfw.VoxelGrid_Grid_set)
    def At(self, *args): return _gfw.VoxelGrid_At(self, *args)
    def Set(self, *args): return _gfw.VoxelGrid_Set(self, *args)
    def AsTexture3D(self): return _gfw.VoxelGrid_AsTexture3D(self)
    __swig_setmethods__["SizeX"] = _gfw.VoxelGrid_SizeX_set
    __swig_getmethods__["SizeX"] = _gfw.VoxelGrid_SizeX_get
    if _newclass:SizeX = _swig_property(_gfw.VoxelGrid_SizeX_get, _gfw.VoxelGrid_SizeX_set)
    __swig_setmethods__["SizeY"] = _gfw.VoxelGrid_SizeY_set
    __swig_getmethods__["SizeY"] = _gfw.VoxelGrid_SizeY_get
    if _newclass:SizeY = _swig_property(_gfw.VoxelGrid_SizeY_get, _gfw.VoxelGrid_SizeY_set)
    __swig_setmethods__["SizeZ"] = _gfw.VoxelGrid_SizeZ_set
    __swig_getmethods__["SizeZ"] = _gfw.VoxelGrid_SizeZ_get
    if _newclass:SizeZ = _swig_property(_gfw.VoxelGrid_SizeZ_get, _gfw.VoxelGrid_SizeZ_set)
    __swig_destroy__ = _gfw.delete_VoxelGrid
    __del__ = lambda self : None;
VoxelGrid_swigregister = _gfw.VoxelGrid_swigregister
VoxelGrid_swigregister(VoxelGrid)

class Ray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dx"] = _gfw.Ray_dx_set
    __swig_getmethods__["dx"] = _gfw.Ray_dx_get
    if _newclass:dx = _swig_property(_gfw.Ray_dx_get, _gfw.Ray_dx_set)
    __swig_setmethods__["dy"] = _gfw.Ray_dy_set
    __swig_getmethods__["dy"] = _gfw.Ray_dy_get
    if _newclass:dy = _swig_property(_gfw.Ray_dy_get, _gfw.Ray_dy_set)
    __swig_setmethods__["dz"] = _gfw.Ray_dz_set
    __swig_getmethods__["dz"] = _gfw.Ray_dz_get
    if _newclass:dz = _swig_property(_gfw.Ray_dz_get, _gfw.Ray_dz_set)
    __swig_setmethods__["sx"] = _gfw.Ray_sx_set
    __swig_getmethods__["sx"] = _gfw.Ray_sx_get
    if _newclass:sx = _swig_property(_gfw.Ray_sx_get, _gfw.Ray_sx_set)
    __swig_setmethods__["sy"] = _gfw.Ray_sy_set
    __swig_getmethods__["sy"] = _gfw.Ray_sy_get
    if _newclass:sy = _swig_property(_gfw.Ray_sy_get, _gfw.Ray_sy_set)
    __swig_setmethods__["sz"] = _gfw.Ray_sz_set
    __swig_getmethods__["sz"] = _gfw.Ray_sz_get
    if _newclass:sz = _swig_property(_gfw.Ray_sz_get, _gfw.Ray_sz_set)
    __swig_setmethods__["x"] = _gfw.Ray_x_set
    __swig_getmethods__["x"] = _gfw.Ray_x_get
    if _newclass:x = _swig_property(_gfw.Ray_x_get, _gfw.Ray_x_set)
    __swig_setmethods__["y"] = _gfw.Ray_y_set
    __swig_getmethods__["y"] = _gfw.Ray_y_get
    if _newclass:y = _swig_property(_gfw.Ray_y_get, _gfw.Ray_y_set)
    __swig_setmethods__["z"] = _gfw.Ray_z_set
    __swig_getmethods__["z"] = _gfw.Ray_z_get
    if _newclass:z = _swig_property(_gfw.Ray_z_get, _gfw.Ray_z_set)
    __swig_setmethods__["color"] = _gfw.Ray_color_set
    __swig_getmethods__["color"] = _gfw.Ray_color_get
    if _newclass:color = _swig_property(_gfw.Ray_color_get, _gfw.Ray_color_set)
    __swig_setmethods__["Iterations"] = _gfw.Ray_Iterations_set
    __swig_getmethods__["Iterations"] = _gfw.Ray_Iterations_get
    if _newclass:Iterations = _swig_property(_gfw.Ray_Iterations_get, _gfw.Ray_Iterations_set)
    __swig_setmethods__["VoxelNormal"] = _gfw.Ray_VoxelNormal_set
    __swig_getmethods__["VoxelNormal"] = _gfw.Ray_VoxelNormal_get
    if _newclass:VoxelNormal = _swig_property(_gfw.Ray_VoxelNormal_get, _gfw.Ray_VoxelNormal_set)
    __swig_setmethods__["LOD"] = _gfw.Ray_LOD_set
    __swig_getmethods__["LOD"] = _gfw.Ray_LOD_get
    if _newclass:LOD = _swig_property(_gfw.Ray_LOD_get, _gfw.Ray_LOD_set)
    def __init__(self): 
        this = _gfw.new_Ray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gfw.delete_Ray
    __del__ = lambda self : None;
Ray_swigregister = _gfw.Ray_swigregister
Ray_swigregister(Ray)


def MakeRay(*args):
  return _gfw.MakeRay(*args)
MakeRay = _gfw.MakeRay
class RayLight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RayLight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RayLight, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _gfw.RayLight_x_set
    __swig_getmethods__["x"] = _gfw.RayLight_x_get
    if _newclass:x = _swig_property(_gfw.RayLight_x_get, _gfw.RayLight_x_set)
    __swig_setmethods__["y"] = _gfw.RayLight_y_set
    __swig_getmethods__["y"] = _gfw.RayLight_y_get
    if _newclass:y = _swig_property(_gfw.RayLight_y_get, _gfw.RayLight_y_set)
    __swig_setmethods__["z"] = _gfw.RayLight_z_set
    __swig_getmethods__["z"] = _gfw.RayLight_z_get
    if _newclass:z = _swig_property(_gfw.RayLight_z_get, _gfw.RayLight_z_set)
    __swig_setmethods__["r"] = _gfw.RayLight_r_set
    __swig_getmethods__["r"] = _gfw.RayLight_r_get
    if _newclass:r = _swig_property(_gfw.RayLight_r_get, _gfw.RayLight_r_set)
    __swig_setmethods__["g"] = _gfw.RayLight_g_set
    __swig_getmethods__["g"] = _gfw.RayLight_g_get
    if _newclass:g = _swig_property(_gfw.RayLight_g_get, _gfw.RayLight_g_set)
    __swig_setmethods__["b"] = _gfw.RayLight_b_set
    __swig_getmethods__["b"] = _gfw.RayLight_b_get
    if _newclass:b = _swig_property(_gfw.RayLight_b_get, _gfw.RayLight_b_set)
    __swig_setmethods__["fade"] = _gfw.RayLight_fade_set
    __swig_getmethods__["fade"] = _gfw.RayLight_fade_get
    if _newclass:fade = _swig_property(_gfw.RayLight_fade_get, _gfw.RayLight_fade_set)
    __swig_setmethods__["LOD"] = _gfw.RayLight_LOD_set
    __swig_getmethods__["LOD"] = _gfw.RayLight_LOD_get
    if _newclass:LOD = _swig_property(_gfw.RayLight_LOD_get, _gfw.RayLight_LOD_set)
    def __init__(self): 
        this = _gfw.new_RayLight()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gfw.delete_RayLight
    __del__ = lambda self : None;
RayLight_swigregister = _gfw.RayLight_swigregister
RayLight_swigregister(RayLight)


def MakeRayLight(*args):
  return _gfw.MakeRayLight(*args)
MakeRayLight = _gfw.MakeRayLight
class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _gfw.Camera_x_set
    __swig_getmethods__["x"] = _gfw.Camera_x_get
    if _newclass:x = _swig_property(_gfw.Camera_x_get, _gfw.Camera_x_set)
    __swig_setmethods__["y"] = _gfw.Camera_y_set
    __swig_getmethods__["y"] = _gfw.Camera_y_get
    if _newclass:y = _swig_property(_gfw.Camera_y_get, _gfw.Camera_y_set)
    __swig_setmethods__["z"] = _gfw.Camera_z_set
    __swig_getmethods__["z"] = _gfw.Camera_z_get
    if _newclass:z = _swig_property(_gfw.Camera_z_get, _gfw.Camera_z_set)
    __swig_setmethods__["rx"] = _gfw.Camera_rx_set
    __swig_getmethods__["rx"] = _gfw.Camera_rx_get
    if _newclass:rx = _swig_property(_gfw.Camera_rx_get, _gfw.Camera_rx_set)
    __swig_setmethods__["ry"] = _gfw.Camera_ry_set
    __swig_getmethods__["ry"] = _gfw.Camera_ry_get
    if _newclass:ry = _swig_property(_gfw.Camera_ry_get, _gfw.Camera_ry_set)
    __swig_setmethods__["rz"] = _gfw.Camera_rz_set
    __swig_getmethods__["rz"] = _gfw.Camera_rz_get
    if _newclass:rz = _swig_property(_gfw.Camera_rz_get, _gfw.Camera_rz_set)
    __swig_setmethods__["aspect"] = _gfw.Camera_aspect_set
    __swig_getmethods__["aspect"] = _gfw.Camera_aspect_get
    if _newclass:aspect = _swig_property(_gfw.Camera_aspect_get, _gfw.Camera_aspect_set)
    def __init__(self): 
        this = _gfw.new_Camera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gfw.delete_Camera
    __del__ = lambda self : None;
Camera_swigregister = _gfw.Camera_swigregister
Camera_swigregister(Camera)


def MakeCamera(*args):
  return _gfw.MakeCamera(*args)
MakeCamera = _gfw.MakeCamera
class Scene(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scene, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_Scene(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetRayLight(self, *args): return _gfw.Scene_SetRayLight(self, *args)
    def RemoveRayLight(self, *args): return _gfw.Scene_RemoveRayLight(self, *args)
    def SetCamera(self, *args): return _gfw.Scene_SetCamera(self, *args)
    def SetTree(self, *args): return _gfw.Scene_SetTree(self, *args)
    def RenderToTexture(self, *args): return _gfw.Scene_RenderToTexture(self, *args)
    def GetStartNode(self, *args): return _gfw.Scene_GetStartNode(self, *args)
    def SetAmbient(self, *args): return _gfw.Scene_SetAmbient(self, *args)
    MaxLights = _gfw.Scene_MaxLights
    __swig_setmethods__["Lights"] = _gfw.Scene_Lights_set
    __swig_getmethods__["Lights"] = _gfw.Scene_Lights_get
    if _newclass:Lights = _swig_property(_gfw.Scene_Lights_get, _gfw.Scene_Lights_set)
    __swig_setmethods__["cam"] = _gfw.Scene_cam_set
    __swig_getmethods__["cam"] = _gfw.Scene_cam_get
    if _newclass:cam = _swig_property(_gfw.Scene_cam_get, _gfw.Scene_cam_set)
    __swig_setmethods__["tree"] = _gfw.Scene_tree_set
    __swig_getmethods__["tree"] = _gfw.Scene_tree_get
    if _newclass:tree = _swig_property(_gfw.Scene_tree_get, _gfw.Scene_tree_set)
    __swig_setmethods__["AmbientB"] = _gfw.Scene_AmbientB_set
    __swig_getmethods__["AmbientB"] = _gfw.Scene_AmbientB_get
    if _newclass:AmbientB = _swig_property(_gfw.Scene_AmbientB_get, _gfw.Scene_AmbientB_set)
    __swig_setmethods__["AmbientR"] = _gfw.Scene_AmbientR_set
    __swig_getmethods__["AmbientR"] = _gfw.Scene_AmbientR_get
    if _newclass:AmbientR = _swig_property(_gfw.Scene_AmbientR_get, _gfw.Scene_AmbientR_set)
    __swig_setmethods__["AmbientG"] = _gfw.Scene_AmbientG_set
    __swig_getmethods__["AmbientG"] = _gfw.Scene_AmbientG_get
    if _newclass:AmbientG = _swig_property(_gfw.Scene_AmbientG_get, _gfw.Scene_AmbientG_set)
    __swig_setmethods__["DoLightning"] = _gfw.Scene_DoLightning_set
    __swig_getmethods__["DoLightning"] = _gfw.Scene_DoLightning_get
    if _newclass:DoLightning = _swig_property(_gfw.Scene_DoLightning_get, _gfw.Scene_DoLightning_set)
    __swig_destroy__ = _gfw.delete_Scene
    __del__ = lambda self : None;
Scene_swigregister = _gfw.Scene_swigregister
Scene_swigregister(Scene)

class NTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NTree, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _gfw.new_NTree()
        try: self.this.append(this)
        except: self.this = this
    def At(self, *args): return _gfw.NTree_At(self, *args)
    def Set(self, *args): return _gfw.NTree_Set(self, *args)
    def Split(self, N = 2): return _gfw.NTree_Split(self, N)
    def SetData(self, *args): return _gfw.NTree_SetData(self, *args)
    def UpdateTree(self): return _gfw.NTree_UpdateTree(self)
    def MakeParent(self): return _gfw.NTree_MakeParent(self)
    def InsertPoint(self, *args): return _gfw.NTree_InsertPoint(self, *args)
    def MakeLODAtPoint(self, *args): return _gfw.NTree_MakeLODAtPoint(self, *args)
    def GetData(self): return _gfw.NTree_GetData(self)
    def GetChild(self, *args): return _gfw.NTree_GetChild(self, *args)
    def CastRay(self, *args): return _gfw.NTree_CastRay(self, *args)
    __swig_setmethods__["Data"] = _gfw.NTree_Data_set
    __swig_getmethods__["Data"] = _gfw.NTree_Data_get
    if _newclass:Data = _swig_property(_gfw.NTree_Data_get, _gfw.NTree_Data_set)
    __swig_setmethods__["NChild"] = _gfw.NTree_NChild_set
    __swig_getmethods__["NChild"] = _gfw.NTree_NChild_get
    if _newclass:NChild = _swig_property(_gfw.NTree_NChild_get, _gfw.NTree_NChild_set)
    __swig_setmethods__["Type"] = _gfw.NTree_Type_set
    __swig_getmethods__["Type"] = _gfw.NTree_Type_get
    if _newclass:Type = _swig_property(_gfw.NTree_Type_get, _gfw.NTree_Type_set)
    __swig_setmethods__["nLights"] = _gfw.NTree_nLights_set
    __swig_getmethods__["nLights"] = _gfw.NTree_nLights_get
    if _newclass:nLights = _swig_property(_gfw.NTree_nLights_get, _gfw.NTree_nLights_set)
    __swig_setmethods__["Children"] = _gfw.NTree_Children_set
    __swig_getmethods__["Children"] = _gfw.NTree_Children_get
    if _newclass:Children = _swig_property(_gfw.NTree_Children_get, _gfw.NTree_Children_set)
    __swig_setmethods__["Parent"] = _gfw.NTree_Parent_set
    __swig_getmethods__["Parent"] = _gfw.NTree_Parent_get
    if _newclass:Parent = _swig_property(_gfw.NTree_Parent_get, _gfw.NTree_Parent_set)
    __swig_setmethods__["LOD"] = _gfw.NTree_LOD_set
    __swig_getmethods__["LOD"] = _gfw.NTree_LOD_get
    if _newclass:LOD = _swig_property(_gfw.NTree_LOD_get, _gfw.NTree_LOD_set)
    __swig_destroy__ = _gfw.delete_NTree
    __del__ = lambda self : None;
NTree_swigregister = _gfw.NTree_swigregister
NTree_swigregister(NTree)


def RunTest(*args):
  return _gfw.RunTest(*args)
RunTest = _gfw.RunTest

def GenTestNTree():
  return _gfw.GenTestNTree()
GenTestNTree = _gfw.GenTestNTree
KEY_RELEASE = _gfw.KEY_RELEASE
KEYPRESS = _gfw.KEYPRESS
KEY_UNKNOWN = _gfw.KEY_UNKNOWN
KEY_SPACE = _gfw.KEY_SPACE
KEY_SPECIAL = _gfw.KEY_SPECIAL
KEY_ESC = _gfw.KEY_ESC
KEY_F1 = _gfw.KEY_F1
KEY_F2 = _gfw.KEY_F2
KEY_F3 = _gfw.KEY_F3
KEY_F4 = _gfw.KEY_F4
KEY_F5 = _gfw.KEY_F5
KEY_F6 = _gfw.KEY_F6
KEY_F7 = _gfw.KEY_F7
KEY_F8 = _gfw.KEY_F8
KEY_F9 = _gfw.KEY_F9
KEY_F10 = _gfw.KEY_F10
KEY_F11 = _gfw.KEY_F11
KEY_F12 = _gfw.KEY_F12
KEY_F13 = _gfw.KEY_F13
KEY_F14 = _gfw.KEY_F14
KEY_F15 = _gfw.KEY_F15
KEY_F16 = _gfw.KEY_F16
KEY_F17 = _gfw.KEY_F17
KEY_F18 = _gfw.KEY_F18
KEY_F19 = _gfw.KEY_F19
KEY_F20 = _gfw.KEY_F20
KEY_F21 = _gfw.KEY_F21
KEY_F22 = _gfw.KEY_F22
KEY_F23 = _gfw.KEY_F23
KEY_F24 = _gfw.KEY_F24
KEY_F25 = _gfw.KEY_F25
KEY_UP = _gfw.KEY_UP
KEY_DOWN = _gfw.KEY_DOWN
KEY_LEFT = _gfw.KEY_LEFT
KEY_RIGHT = _gfw.KEY_RIGHT
KEY_LSHIFT = _gfw.KEY_LSHIFT
KEY_RSHIFT = _gfw.KEY_RSHIFT
KEY_LCTRL = _gfw.KEY_LCTRL
KEY_RCTRL = _gfw.KEY_RCTRL
KEY_LALT = _gfw.KEY_LALT
KEY_RALT = _gfw.KEY_RALT
KEY_TAB = _gfw.KEY_TAB
KEY_ENTER = _gfw.KEY_ENTER
KEY_BACKSPACE = _gfw.KEY_BACKSPACE
KEY_INSERT = _gfw.KEY_INSERT
KEY_DEL = _gfw.KEY_DEL
KEY_PAGEUP = _gfw.KEY_PAGEUP
KEY_PAGEDOWN = _gfw.KEY_PAGEDOWN
KEY_HOME = _gfw.KEY_HOME
KEY_END = _gfw.KEY_END
KEY_KP_0 = _gfw.KEY_KP_0
KEY_KP_1 = _gfw.KEY_KP_1
KEY_KP_2 = _gfw.KEY_KP_2
KEY_KP_3 = _gfw.KEY_KP_3
KEY_KP_4 = _gfw.KEY_KP_4
KEY_KP_5 = _gfw.KEY_KP_5
KEY_KP_6 = _gfw.KEY_KP_6
KEY_KP_7 = _gfw.KEY_KP_7
KEY_KP_8 = _gfw.KEY_KP_8
KEY_KP_9 = _gfw.KEY_KP_9
KEY_KP_DIVIDE = _gfw.KEY_KP_DIVIDE
KEY_KP_MULTIPLY = _gfw.KEY_KP_MULTIPLY
KEY_KP_SUBTRACT = _gfw.KEY_KP_SUBTRACT
KEY_KP_ADD = _gfw.KEY_KP_ADD
KEY_KP_DECIMAL = _gfw.KEY_KP_DECIMAL
KEY_KP_EQUAL = _gfw.KEY_KP_EQUAL
KEY_KP_ENTER = _gfw.KEY_KP_ENTER
KEY_LAST = _gfw.KEY_LAST
MOUSE_BUTTON_1 = _gfw.MOUSE_BUTTON_1
MOUSE_BUTTON_2 = _gfw.MOUSE_BUTTON_2
MOUSE_BUTTON_3 = _gfw.MOUSE_BUTTON_3
MOUSE_BUTTON_4 = _gfw.MOUSE_BUTTON_4
MOUSE_BUTTON_5 = _gfw.MOUSE_BUTTON_5
MOUSE_BUTTON_6 = _gfw.MOUSE_BUTTON_6
MOUSE_BUTTON_7 = _gfw.MOUSE_BUTTON_7
MOUSE_BUTTON_8 = _gfw.MOUSE_BUTTON_8
MOUSE_BUTTON_LAST = _gfw.MOUSE_BUTTON_LAST
MOUSE_BUTTON_LEFT = _gfw.MOUSE_BUTTON_LEFT
MOUSE_BUTTON_RIGHT = _gfw.MOUSE_BUTTON_RIGHT
MOUSE_BUTTON_MIDDLE = _gfw.MOUSE_BUTTON_MIDDLE
JOYSTICK_1 = _gfw.JOYSTICK_1
JOYSTICK_2 = _gfw.JOYSTICK_2
JOYSTICK_3 = _gfw.JOYSTICK_3
JOYSTICK_4 = _gfw.JOYSTICK_4
JOYSTICK_5 = _gfw.JOYSTICK_5
JOYSTICK_6 = _gfw.JOYSTICK_6
JOYSTICK_7 = _gfw.JOYSTICK_7
JOYSTICK_8 = _gfw.JOYSTICK_8
JOYSTICK_9 = _gfw.JOYSTICK_9
JOYSTICK_10 = _gfw.JOYSTICK_10
JOYSTICK_11 = _gfw.JOYSTICK_11
JOYSTICK_12 = _gfw.JOYSTICK_12
JOYSTICK_13 = _gfw.JOYSTICK_13
JOYSTICK_14 = _gfw.JOYSTICK_14
JOYSTICK_15 = _gfw.JOYSTICK_15
JOYSTICK_16 = _gfw.JOYSTICK_16
JOYSTICK_LAST = _gfw.JOYSTICK_LAST
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gfw.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _gfw.SwigPyIterator_value(self)
    def incr(self, n = 1): return _gfw.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _gfw.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _gfw.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _gfw.SwigPyIterator_equal(self, *args)
    def copy(self): return _gfw.SwigPyIterator_copy(self)
    def next(self): return _gfw.SwigPyIterator_next(self)
    def __next__(self): return _gfw.SwigPyIterator___next__(self)
    def previous(self): return _gfw.SwigPyIterator_previous(self)
    def advance(self, *args): return _gfw.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _gfw.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _gfw.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _gfw.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _gfw.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _gfw.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _gfw.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _gfw.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

MAXTEXTURES = _gfw.MAXTEXTURES
class Texture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Texture, name)
    __repr__ = _swig_repr
    NEAREST = _gfw.Texture_NEAREST
    LINEAR = _gfw.Texture_LINEAR
    def __init__(self, *args): 
        this = _gfw.new_Texture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gfw.delete_Texture
    __del__ = lambda self : None;
    def Bind(self, *args): return _gfw.Texture_Bind(self, *args)
    def GetGLTexture(self): return _gfw.Texture_GetGLTexture(self)
    def LoadData(self, *args): return _gfw.Texture_LoadData(self, *args)
    def GenMipmaps(self): return _gfw.Texture_GenMipmaps(self)
    def SetMagnifyingInterpolation(self, *args): return _gfw.Texture_SetMagnifyingInterpolation(self, *args)
    def SetMinifyingInterpolation(self, *args): return _gfw.Texture_SetMinifyingInterpolation(self, *args)
    def UpdateTexture(self, *args): return _gfw.Texture_UpdateTexture(self, *args)
    __swig_setmethods__["gltex"] = _gfw.Texture_gltex_set
    __swig_getmethods__["gltex"] = _gfw.Texture_gltex_get
    if _newclass:gltex = _swig_property(_gfw.Texture_gltex_get, _gfw.Texture_gltex_set)
    __swig_setmethods__["texdim"] = _gfw.Texture_texdim_set
    __swig_getmethods__["texdim"] = _gfw.Texture_texdim_get
    if _newclass:texdim = _swig_property(_gfw.Texture_texdim_get, _gfw.Texture_texdim_set)
    __swig_setmethods__["glCol"] = _gfw.Texture_glCol_set
    __swig_getmethods__["glCol"] = _gfw.Texture_glCol_get
    if _newclass:glCol = _swig_property(_gfw.Texture_glCol_get, _gfw.Texture_glCol_set)
    __swig_setmethods__["intype"] = _gfw.Texture_intype_set
    __swig_getmethods__["intype"] = _gfw.Texture_intype_get
    if _newclass:intype = _swig_property(_gfw.Texture_intype_get, _gfw.Texture_intype_set)
    __swig_setmethods__["Channels"] = _gfw.Texture_Channels_set
    __swig_getmethods__["Channels"] = _gfw.Texture_Channels_get
    if _newclass:Channels = _swig_property(_gfw.Texture_Channels_get, _gfw.Texture_Channels_set)
    __swig_setmethods__["range"] = _gfw.Texture_range_set
    __swig_getmethods__["range"] = _gfw.Texture_range_get
    if _newclass:range = _swig_property(_gfw.Texture_range_get, _gfw.Texture_range_set)
    __swig_setmethods__["ref"] = _gfw.Texture_ref_set
    __swig_getmethods__["ref"] = _gfw.Texture_ref_get
    if _newclass:ref = _swig_property(_gfw.Texture_ref_get, _gfw.Texture_ref_set)
    __swig_setmethods__["width"] = _gfw.Texture_width_set
    __swig_getmethods__["width"] = _gfw.Texture_width_get
    if _newclass:width = _swig_property(_gfw.Texture_width_get, _gfw.Texture_width_set)
    __swig_setmethods__["height"] = _gfw.Texture_height_set
    __swig_getmethods__["height"] = _gfw.Texture_height_get
    if _newclass:height = _swig_property(_gfw.Texture_height_get, _gfw.Texture_height_set)
    __swig_setmethods__["depth"] = _gfw.Texture_depth_set
    __swig_getmethods__["depth"] = _gfw.Texture_depth_get
    if _newclass:depth = _swig_property(_gfw.Texture_depth_get, _gfw.Texture_depth_set)
    __swig_setmethods__["channels"] = _gfw.Texture_channels_set
    __swig_getmethods__["channels"] = _gfw.Texture_channels_get
    if _newclass:channels = _swig_property(_gfw.Texture_channels_get, _gfw.Texture_channels_set)
    __swig_setmethods__["typesize"] = _gfw.Texture_typesize_set
    __swig_getmethods__["typesize"] = _gfw.Texture_typesize_get
    if _newclass:typesize = _swig_property(_gfw.Texture_typesize_get, _gfw.Texture_typesize_set)
Texture_swigregister = _gfw.Texture_swigregister
Texture_swigregister(Texture)

class Drawable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Drawable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Drawable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _gfw.new_Drawable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gfw.delete_Drawable
    __del__ = lambda self : None;
    def ActivateTextures(self): return _gfw.Drawable_ActivateTextures(self)
    def Draw(self, *args): return _gfw.Drawable_Draw(self, *args)
    def AddTexture(self, *args): return _gfw.Drawable_AddTexture(self, *args)
Drawable_swigregister = _gfw.Drawable_swigregister
Drawable_swigregister(Drawable)

class Polygon(Drawable):
    __swig_setmethods__ = {}
    for _s in [Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon, name, value)
    __swig_getmethods__ = {}
    for _s in [Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gfw.delete_Polygon
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _gfw.new_Polygon(*args)
        try: self.this.append(this)
        except: self.this = this
    def Draw(self, x = 0, y = 0, rotation = 0): return _gfw.Polygon_Draw(self, x, y, rotation)
    def SetDrawType(self, *args): return _gfw.Polygon_SetDrawType(self, *args)
    def LoadUV(self, *args): return _gfw.Polygon_LoadUV(self, *args)
    def ReloadUV(self, *args): return _gfw.Polygon_ReloadUV(self, *args)
    def LoadVerts(self, *args): return _gfw.Polygon_LoadVerts(self, *args)
    def ReloadVerts(self, *args): return _gfw.Polygon_ReloadVerts(self, *args)
    def Unload(self): return _gfw.Polygon_Unload(self)
    __swig_setmethods__["usingColor"] = _gfw.Polygon_usingColor_set
    __swig_getmethods__["usingColor"] = _gfw.Polygon_usingColor_get
    if _newclass:usingColor = _swig_property(_gfw.Polygon_usingColor_get, _gfw.Polygon_usingColor_set)
    __swig_setmethods__["usingUV"] = _gfw.Polygon_usingUV_set
    __swig_getmethods__["usingUV"] = _gfw.Polygon_usingUV_get
    if _newclass:usingUV = _swig_property(_gfw.Polygon_usingUV_get, _gfw.Polygon_usingUV_set)
    __swig_setmethods__["indices"] = _gfw.Polygon_indices_set
    __swig_getmethods__["indices"] = _gfw.Polygon_indices_get
    if _newclass:indices = _swig_property(_gfw.Polygon_indices_get, _gfw.Polygon_indices_set)
    __swig_setmethods__["vertVbo"] = _gfw.Polygon_vertVbo_set
    __swig_getmethods__["vertVbo"] = _gfw.Polygon_vertVbo_get
    if _newclass:vertVbo = _swig_property(_gfw.Polygon_vertVbo_get, _gfw.Polygon_vertVbo_set)
    __swig_setmethods__["indiceVbo"] = _gfw.Polygon_indiceVbo_set
    __swig_getmethods__["indiceVbo"] = _gfw.Polygon_indiceVbo_get
    if _newclass:indiceVbo = _swig_property(_gfw.Polygon_indiceVbo_get, _gfw.Polygon_indiceVbo_set)
    __swig_setmethods__["colorVbo"] = _gfw.Polygon_colorVbo_set
    __swig_getmethods__["colorVbo"] = _gfw.Polygon_colorVbo_get
    if _newclass:colorVbo = _swig_property(_gfw.Polygon_colorVbo_get, _gfw.Polygon_colorVbo_set)
    __swig_setmethods__["uvVbo"] = _gfw.Polygon_uvVbo_set
    __swig_getmethods__["uvVbo"] = _gfw.Polygon_uvVbo_get
    if _newclass:uvVbo = _swig_property(_gfw.Polygon_uvVbo_get, _gfw.Polygon_uvVbo_set)
    __swig_setmethods__["uvLoadedSize"] = _gfw.Polygon_uvLoadedSize_set
    __swig_getmethods__["uvLoadedSize"] = _gfw.Polygon_uvLoadedSize_get
    if _newclass:uvLoadedSize = _swig_property(_gfw.Polygon_uvLoadedSize_get, _gfw.Polygon_uvLoadedSize_set)
    __swig_setmethods__["uvLoadedType"] = _gfw.Polygon_uvLoadedType_set
    __swig_getmethods__["uvLoadedType"] = _gfw.Polygon_uvLoadedType_get
    if _newclass:uvLoadedType = _swig_property(_gfw.Polygon_uvLoadedType_get, _gfw.Polygon_uvLoadedType_set)
Polygon_swigregister = _gfw.Polygon_swigregister
Polygon_swigregister(Polygon)

class Text(Drawable):
    __swig_setmethods__ = {}
    for _s in [Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    for _s in [Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_Text(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetText(self, *args): return _gfw.Text_SetText(self, *args)
    def Draw(self, *args): return _gfw.Text_Draw(self, *args)
    __swig_destroy__ = _gfw.delete_Text
    __del__ = lambda self : None;
Text_swigregister = _gfw.Text_swigregister
Text_swigregister(Text)

class Shader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_Shader(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetUniformLocation(self, *args): return _gfw.Shader_GetUniformLocation(self, *args)
    def SetUniform1f(self, *args): return _gfw.Shader_SetUniform1f(self, *args)
    def SetUniform2f(self, *args): return _gfw.Shader_SetUniform2f(self, *args)
    def SetUniform3f(self, *args): return _gfw.Shader_SetUniform3f(self, *args)
    def SetUniform4f(self, *args): return _gfw.Shader_SetUniform4f(self, *args)
    def SetUniform1i(self, *args): return _gfw.Shader_SetUniform1i(self, *args)
    def SetUniform1fv(self, *args): return _gfw.Shader_SetUniform1fv(self, *args)
    def SetUniform3fv(self, *args): return _gfw.Shader_SetUniform3fv(self, *args)
    def SetUniform2fv(self, *args): return _gfw.Shader_SetUniform2fv(self, *args)
    def SetUniform1iv(self, *args): return _gfw.Shader_SetUniform1iv(self, *args)
    __swig_setmethods__["ShaderProgram"] = _gfw.Shader_ShaderProgram_set
    __swig_getmethods__["ShaderProgram"] = _gfw.Shader_ShaderProgram_get
    if _newclass:ShaderProgram = _swig_property(_gfw.Shader_ShaderProgram_get, _gfw.Shader_ShaderProgram_set)
    __swig_destroy__ = _gfw.delete_Shader
    __del__ = lambda self : None;
Shader_swigregister = _gfw.Shader_swigregister
Shader_swigregister(Shader)

class KeyEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _gfw.KeyEvent_key_set
    __swig_getmethods__["key"] = _gfw.KeyEvent_key_get
    if _newclass:key = _swig_property(_gfw.KeyEvent_key_get, _gfw.KeyEvent_key_set)
    __swig_setmethods__["charKey"] = _gfw.KeyEvent_charKey_set
    __swig_getmethods__["charKey"] = _gfw.KeyEvent_charKey_get
    if _newclass:charKey = _swig_property(_gfw.KeyEvent_charKey_get, _gfw.KeyEvent_charKey_set)
    __swig_setmethods__["action"] = _gfw.KeyEvent_action_set
    __swig_getmethods__["action"] = _gfw.KeyEvent_action_get
    if _newclass:action = _swig_property(_gfw.KeyEvent_action_get, _gfw.KeyEvent_action_set)
    def __init__(self): 
        this = _gfw.new_KeyEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gfw.delete_KeyEvent
    __del__ = lambda self : None;
KeyEvent_swigregister = _gfw.KeyEvent_swigregister
KeyEvent_swigregister(KeyEvent)

class MouseEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MouseEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["button"] = _gfw.MouseEvent_button_set
    __swig_getmethods__["button"] = _gfw.MouseEvent_button_get
    if _newclass:button = _swig_property(_gfw.MouseEvent_button_get, _gfw.MouseEvent_button_set)
    __swig_setmethods__["action"] = _gfw.MouseEvent_action_set
    __swig_getmethods__["action"] = _gfw.MouseEvent_action_get
    if _newclass:action = _swig_property(_gfw.MouseEvent_action_get, _gfw.MouseEvent_action_set)
    def __init__(self): 
        this = _gfw.new_MouseEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gfw.delete_MouseEvent
    __del__ = lambda self : None;
MouseEvent_swigregister = _gfw.MouseEvent_swigregister
MouseEvent_swigregister(MouseEvent)

class Vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_Vec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["X"] = _gfw.Vec_X_set
    __swig_getmethods__["X"] = _gfw.Vec_X_get
    if _newclass:X = _swig_property(_gfw.Vec_X_get, _gfw.Vec_X_set)
    __swig_setmethods__["Y"] = _gfw.Vec_Y_set
    __swig_getmethods__["Y"] = _gfw.Vec_Y_get
    if _newclass:Y = _swig_property(_gfw.Vec_Y_get, _gfw.Vec_Y_set)
    __swig_destroy__ = _gfw.delete_Vec
    __del__ = lambda self : None;
Vec_swigregister = _gfw.Vec_swigregister
Vec_swigregister(Vec)


def ScreenToWorldCoordinates(*args):
  return _gfw.ScreenToWorldCoordinates(*args)
ScreenToWorldCoordinates = _gfw.ScreenToWorldCoordinates

def WorldToScreenCoordinates(*args):
  return _gfw.WorldToScreenCoordinates(*args)
WorldToScreenCoordinates = _gfw.WorldToScreenCoordinates

def DeInit():
  return _gfw.DeInit()
DeInit = _gfw.DeInit

def Refresh():
  return _gfw.Refresh()
Refresh = _gfw.Refresh

def ClearBuffer():
  return _gfw.ClearBuffer()
ClearBuffer = _gfw.ClearBuffer

def Draw(*args):
  return _gfw.Draw(*args)
Draw = _gfw.Draw

def GetKeyEvents():
  return _gfw.GetKeyEvents()
GetKeyEvents = _gfw.GetKeyEvents

def GetMouseEvents():
  return _gfw.GetMouseEvents()
GetMouseEvents = _gfw.GetMouseEvents

def GetMousePos():
  return _gfw.GetMousePos()
GetMousePos = _gfw.GetMousePos

def Zoom(*args):
  return _gfw.Zoom(*args)
Zoom = _gfw.Zoom

def SetBGColor(*args):
  return _gfw.SetBGColor(*args)
SetBGColor = _gfw.SetBGColor

def SetActiveShader(*args):
  return _gfw.SetActiveShader(*args)
SetActiveShader = _gfw.SetActiveShader

def GetActiveShader():
  return _gfw.GetActiveShader()
GetActiveShader = _gfw.GetActiveShader
ALPHA_BLEND = _gfw.ALPHA_BLEND
NORMALIZE = _gfw.NORMALIZE

def EnableState(*args):
  return _gfw.EnableState(*args)
EnableState = _gfw.EnableState

def DisableState(*args):
  return _gfw.DisableState(*args)
DisableState = _gfw.DisableState
class Light(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Light, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Light, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_Light(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["R"] = _gfw.Light_R_set
    __swig_getmethods__["R"] = _gfw.Light_R_get
    if _newclass:R = _swig_property(_gfw.Light_R_get, _gfw.Light_R_set)
    __swig_setmethods__["G"] = _gfw.Light_G_set
    __swig_getmethods__["G"] = _gfw.Light_G_get
    if _newclass:G = _swig_property(_gfw.Light_G_get, _gfw.Light_G_set)
    __swig_setmethods__["B"] = _gfw.Light_B_set
    __swig_getmethods__["B"] = _gfw.Light_B_get
    if _newclass:B = _swig_property(_gfw.Light_B_get, _gfw.Light_B_set)
    __swig_setmethods__["X"] = _gfw.Light_X_set
    __swig_getmethods__["X"] = _gfw.Light_X_get
    if _newclass:X = _swig_property(_gfw.Light_X_get, _gfw.Light_X_set)
    __swig_setmethods__["Y"] = _gfw.Light_Y_set
    __swig_getmethods__["Y"] = _gfw.Light_Y_get
    if _newclass:Y = _swig_property(_gfw.Light_Y_get, _gfw.Light_Y_set)
    __swig_setmethods__["intensity"] = _gfw.Light_intensity_set
    __swig_getmethods__["intensity"] = _gfw.Light_intensity_get
    if _newclass:intensity = _swig_property(_gfw.Light_intensity_get, _gfw.Light_intensity_set)
    __swig_destroy__ = _gfw.delete_Light
    __del__ = lambda self : None;
Light_swigregister = _gfw.Light_swigregister
Light_swigregister(Light)

def Init(*args):
  return _gfw.Init(*args)
Init = _gfw.Init

class LightSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_LightSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    def Activate(self): return _gfw.LightSystem_Activate(self)
    def GetLight(self, *args): return _gfw.LightSystem_GetLight(self, *args)
    def SetLight(self, *args): return _gfw.LightSystem_SetLight(self, *args)
    __swig_destroy__ = _gfw.delete_LightSystem
    __del__ = lambda self : None;
LightSystem_swigregister = _gfw.LightSystem_swigregister
LightSystem_swigregister(LightSystem)

class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["Width"] = _gfw.Image_Width_set
    __swig_getmethods__["Width"] = _gfw.Image_Width_get
    if _newclass:Width = _swig_property(_gfw.Image_Width_get, _gfw.Image_Width_set)
    __swig_setmethods__["Height"] = _gfw.Image_Height_set
    __swig_getmethods__["Height"] = _gfw.Image_Height_get
    if _newclass:Height = _swig_property(_gfw.Image_Height_get, _gfw.Image_Height_set)
    __swig_setmethods__["Channels"] = _gfw.Image_Channels_set
    __swig_getmethods__["Channels"] = _gfw.Image_Channels_get
    if _newclass:Channels = _swig_property(_gfw.Image_Channels_get, _gfw.Image_Channels_set)
    __swig_setmethods__["DataType"] = _gfw.Image_DataType_set
    __swig_getmethods__["DataType"] = _gfw.Image_DataType_get
    if _newclass:DataType = _swig_property(_gfw.Image_DataType_get, _gfw.Image_DataType_set)
    def At(self, *args): return _gfw.Image_At(self, *args)
    def AsFloatVector(self): return _gfw.Image_AsFloatVector(self)
    __swig_setmethods__["dataf"] = _gfw.Image_dataf_set
    __swig_getmethods__["dataf"] = _gfw.Image_dataf_get
    if _newclass:dataf = _swig_property(_gfw.Image_dataf_get, _gfw.Image_dataf_set)
    __swig_destroy__ = _gfw.delete_Image
    __del__ = lambda self : None;
Image_swigregister = _gfw.Image_swigregister
Image_swigregister(Image)

class FrameBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_FrameBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    def Bind(self): return _gfw.FrameBuffer_Bind(self)
    def UnBind(self): return _gfw.FrameBuffer_UnBind(self)
    def GetBufferImage(self): return _gfw.FrameBuffer_GetBufferImage(self)
    __swig_setmethods__["tex"] = _gfw.FrameBuffer_tex_set
    __swig_getmethods__["tex"] = _gfw.FrameBuffer_tex_get
    if _newclass:tex = _swig_property(_gfw.FrameBuffer_tex_get, _gfw.FrameBuffer_tex_set)
    __swig_setmethods__["fboId"] = _gfw.FrameBuffer_fboId_set
    __swig_getmethods__["fboId"] = _gfw.FrameBuffer_fboId_get
    if _newclass:fboId = _swig_property(_gfw.FrameBuffer_fboId_get, _gfw.FrameBuffer_fboId_set)
    __swig_destroy__ = _gfw.delete_FrameBuffer
    __del__ = lambda self : None;
FrameBuffer_swigregister = _gfw.FrameBuffer_swigregister
FrameBuffer_swigregister(FrameBuffer)

class FrameDoubleBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameDoubleBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameDoubleBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_FrameDoubleBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    def SwapBuffers(self): return _gfw.FrameDoubleBuffer_SwapBuffers(self)
    def GetCurrentWriteBufferImage(self): return _gfw.FrameDoubleBuffer_GetCurrentWriteBufferImage(self)
    def Bind(self): return _gfw.FrameDoubleBuffer_Bind(self)
    def Unbind(self): return _gfw.FrameDoubleBuffer_Unbind(self)
    def GetReadTexture(self): return _gfw.FrameDoubleBuffer_GetReadTexture(self)
    def GetWriteTexture(self): return _gfw.FrameDoubleBuffer_GetWriteTexture(self)
    __swig_destroy__ = _gfw.delete_FrameDoubleBuffer
    __del__ = lambda self : None;
FrameDoubleBuffer_swigregister = _gfw.FrameDoubleBuffer_swigregister
FrameDoubleBuffer_swigregister(FrameDoubleBuffer)

class Texture3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Texture3D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gfw.new_Texture3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["Width"] = _gfw.Texture3D_Width_set
    __swig_getmethods__["Width"] = _gfw.Texture3D_Width_get
    if _newclass:Width = _swig_property(_gfw.Texture3D_Width_get, _gfw.Texture3D_Width_set)
    __swig_setmethods__["Height"] = _gfw.Texture3D_Height_set
    __swig_getmethods__["Height"] = _gfw.Texture3D_Height_get
    if _newclass:Height = _swig_property(_gfw.Texture3D_Height_get, _gfw.Texture3D_Height_set)
    __swig_setmethods__["Depth"] = _gfw.Texture3D_Depth_set
    __swig_getmethods__["Depth"] = _gfw.Texture3D_Depth_get
    if _newclass:Depth = _swig_property(_gfw.Texture3D_Depth_get, _gfw.Texture3D_Depth_set)
    __swig_setmethods__["tex"] = _gfw.Texture3D_tex_set
    __swig_getmethods__["tex"] = _gfw.Texture3D_tex_get
    if _newclass:tex = _swig_property(_gfw.Texture3D_tex_get, _gfw.Texture3D_tex_set)
    def Bind(self, *args): return _gfw.Texture3D_Bind(self, *args)
    __swig_destroy__ = _gfw.delete_Texture3D
    __del__ = lambda self : None;
Texture3D_swigregister = _gfw.Texture3D_swigregister
Texture3D_swigregister(Texture3D)


def SumFloatVector(*args):
  return _gfw.SumFloatVector(*args)
SumFloatVector = _gfw.SumFloatVector

def GetFloatVectorPtr(*args):
  return _gfw.GetFloatVectorPtr(*args)
GetFloatVectorPtr = _gfw.GetFloatVectorPtr

def GetFloatVectorStr(*args):
  return _gfw.GetFloatVectorStr(*args)
GetFloatVectorStr = _gfw.GetFloatVectorStr
class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _gfw.FloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _gfw.FloatVector___nonzero__(self)
    def __bool__(self): return _gfw.FloatVector___bool__(self)
    def __len__(self): return _gfw.FloatVector___len__(self)
    def pop(self): return _gfw.FloatVector_pop(self)
    def __getslice__(self, *args): return _gfw.FloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _gfw.FloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _gfw.FloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _gfw.FloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _gfw.FloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _gfw.FloatVector___setitem__(self, *args)
    def append(self, *args): return _gfw.FloatVector_append(self, *args)
    def empty(self): return _gfw.FloatVector_empty(self)
    def size(self): return _gfw.FloatVector_size(self)
    def clear(self): return _gfw.FloatVector_clear(self)
    def swap(self, *args): return _gfw.FloatVector_swap(self, *args)
    def get_allocator(self): return _gfw.FloatVector_get_allocator(self)
    def begin(self): return _gfw.FloatVector_begin(self)
    def end(self): return _gfw.FloatVector_end(self)
    def rbegin(self): return _gfw.FloatVector_rbegin(self)
    def rend(self): return _gfw.FloatVector_rend(self)
    def pop_back(self): return _gfw.FloatVector_pop_back(self)
    def erase(self, *args): return _gfw.FloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _gfw.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _gfw.FloatVector_push_back(self, *args)
    def front(self): return _gfw.FloatVector_front(self)
    def back(self): return _gfw.FloatVector_back(self)
    def assign(self, *args): return _gfw.FloatVector_assign(self, *args)
    def resize(self, *args): return _gfw.FloatVector_resize(self, *args)
    def insert(self, *args): return _gfw.FloatVector_insert(self, *args)
    def reserve(self, *args): return _gfw.FloatVector_reserve(self, *args)
    def capacity(self): return _gfw.FloatVector_capacity(self)
    __swig_destroy__ = _gfw.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _gfw.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _gfw.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _gfw.IntVector___nonzero__(self)
    def __bool__(self): return _gfw.IntVector___bool__(self)
    def __len__(self): return _gfw.IntVector___len__(self)
    def pop(self): return _gfw.IntVector_pop(self)
    def __getslice__(self, *args): return _gfw.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _gfw.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _gfw.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _gfw.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _gfw.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _gfw.IntVector___setitem__(self, *args)
    def append(self, *args): return _gfw.IntVector_append(self, *args)
    def empty(self): return _gfw.IntVector_empty(self)
    def size(self): return _gfw.IntVector_size(self)
    def clear(self): return _gfw.IntVector_clear(self)
    def swap(self, *args): return _gfw.IntVector_swap(self, *args)
    def get_allocator(self): return _gfw.IntVector_get_allocator(self)
    def begin(self): return _gfw.IntVector_begin(self)
    def end(self): return _gfw.IntVector_end(self)
    def rbegin(self): return _gfw.IntVector_rbegin(self)
    def rend(self): return _gfw.IntVector_rend(self)
    def pop_back(self): return _gfw.IntVector_pop_back(self)
    def erase(self, *args): return _gfw.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _gfw.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _gfw.IntVector_push_back(self, *args)
    def front(self): return _gfw.IntVector_front(self)
    def back(self): return _gfw.IntVector_back(self)
    def assign(self, *args): return _gfw.IntVector_assign(self, *args)
    def resize(self, *args): return _gfw.IntVector_resize(self, *args)
    def insert(self, *args): return _gfw.IntVector_insert(self, *args)
    def reserve(self, *args): return _gfw.IntVector_reserve(self, *args)
    def capacity(self): return _gfw.IntVector_capacity(self)
    __swig_destroy__ = _gfw.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _gfw.IntVector_swigregister
IntVector_swigregister(IntVector)

class UIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _gfw.UIntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _gfw.UIntVector___nonzero__(self)
    def __bool__(self): return _gfw.UIntVector___bool__(self)
    def __len__(self): return _gfw.UIntVector___len__(self)
    def pop(self): return _gfw.UIntVector_pop(self)
    def __getslice__(self, *args): return _gfw.UIntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _gfw.UIntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _gfw.UIntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _gfw.UIntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _gfw.UIntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _gfw.UIntVector___setitem__(self, *args)
    def append(self, *args): return _gfw.UIntVector_append(self, *args)
    def empty(self): return _gfw.UIntVector_empty(self)
    def size(self): return _gfw.UIntVector_size(self)
    def clear(self): return _gfw.UIntVector_clear(self)
    def swap(self, *args): return _gfw.UIntVector_swap(self, *args)
    def get_allocator(self): return _gfw.UIntVector_get_allocator(self)
    def begin(self): return _gfw.UIntVector_begin(self)
    def end(self): return _gfw.UIntVector_end(self)
    def rbegin(self): return _gfw.UIntVector_rbegin(self)
    def rend(self): return _gfw.UIntVector_rend(self)
    def pop_back(self): return _gfw.UIntVector_pop_back(self)
    def erase(self, *args): return _gfw.UIntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _gfw.new_UIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _gfw.UIntVector_push_back(self, *args)
    def front(self): return _gfw.UIntVector_front(self)
    def back(self): return _gfw.UIntVector_back(self)
    def assign(self, *args): return _gfw.UIntVector_assign(self, *args)
    def resize(self, *args): return _gfw.UIntVector_resize(self, *args)
    def insert(self, *args): return _gfw.UIntVector_insert(self, *args)
    def reserve(self, *args): return _gfw.UIntVector_reserve(self, *args)
    def capacity(self): return _gfw.UIntVector_capacity(self)
    __swig_destroy__ = _gfw.delete_UIntVector
    __del__ = lambda self : None;
UIntVector_swigregister = _gfw.UIntVector_swigregister
UIntVector_swigregister(UIntVector)

class KeyEventList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyEventList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyEventList, name)
    __repr__ = _swig_repr
    def iterator(self): return _gfw.KeyEventList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _gfw.KeyEventList___nonzero__(self)
    def __bool__(self): return _gfw.KeyEventList___bool__(self)
    def __len__(self): return _gfw.KeyEventList___len__(self)
    def pop(self): return _gfw.KeyEventList_pop(self)
    def __getslice__(self, *args): return _gfw.KeyEventList___getslice__(self, *args)
    def __setslice__(self, *args): return _gfw.KeyEventList___setslice__(self, *args)
    def __delslice__(self, *args): return _gfw.KeyEventList___delslice__(self, *args)
    def __delitem__(self, *args): return _gfw.KeyEventList___delitem__(self, *args)
    def __getitem__(self, *args): return _gfw.KeyEventList___getitem__(self, *args)
    def __setitem__(self, *args): return _gfw.KeyEventList___setitem__(self, *args)
    def append(self, *args): return _gfw.KeyEventList_append(self, *args)
    def empty(self): return _gfw.KeyEventList_empty(self)
    def size(self): return _gfw.KeyEventList_size(self)
    def clear(self): return _gfw.KeyEventList_clear(self)
    def swap(self, *args): return _gfw.KeyEventList_swap(self, *args)
    def get_allocator(self): return _gfw.KeyEventList_get_allocator(self)
    def begin(self): return _gfw.KeyEventList_begin(self)
    def end(self): return _gfw.KeyEventList_end(self)
    def rbegin(self): return _gfw.KeyEventList_rbegin(self)
    def rend(self): return _gfw.KeyEventList_rend(self)
    def pop_back(self): return _gfw.KeyEventList_pop_back(self)
    def erase(self, *args): return _gfw.KeyEventList_erase(self, *args)
    def __init__(self, *args): 
        this = _gfw.new_KeyEventList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _gfw.KeyEventList_push_back(self, *args)
    def front(self): return _gfw.KeyEventList_front(self)
    def back(self): return _gfw.KeyEventList_back(self)
    def assign(self, *args): return _gfw.KeyEventList_assign(self, *args)
    def resize(self, *args): return _gfw.KeyEventList_resize(self, *args)
    def insert(self, *args): return _gfw.KeyEventList_insert(self, *args)
    def pop_front(self): return _gfw.KeyEventList_pop_front(self)
    def push_front(self, *args): return _gfw.KeyEventList_push_front(self, *args)
    def reverse(self): return _gfw.KeyEventList_reverse(self)
    __swig_destroy__ = _gfw.delete_KeyEventList
    __del__ = lambda self : None;
KeyEventList_swigregister = _gfw.KeyEventList_swigregister
KeyEventList_swigregister(KeyEventList)

class MouseEventList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseEventList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MouseEventList, name)
    __repr__ = _swig_repr
    def iterator(self): return _gfw.MouseEventList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _gfw.MouseEventList___nonzero__(self)
    def __bool__(self): return _gfw.MouseEventList___bool__(self)
    def __len__(self): return _gfw.MouseEventList___len__(self)
    def pop(self): return _gfw.MouseEventList_pop(self)
    def __getslice__(self, *args): return _gfw.MouseEventList___getslice__(self, *args)
    def __setslice__(self, *args): return _gfw.MouseEventList___setslice__(self, *args)
    def __delslice__(self, *args): return _gfw.MouseEventList___delslice__(self, *args)
    def __delitem__(self, *args): return _gfw.MouseEventList___delitem__(self, *args)
    def __getitem__(self, *args): return _gfw.MouseEventList___getitem__(self, *args)
    def __setitem__(self, *args): return _gfw.MouseEventList___setitem__(self, *args)
    def append(self, *args): return _gfw.MouseEventList_append(self, *args)
    def empty(self): return _gfw.MouseEventList_empty(self)
    def size(self): return _gfw.MouseEventList_size(self)
    def clear(self): return _gfw.MouseEventList_clear(self)
    def swap(self, *args): return _gfw.MouseEventList_swap(self, *args)
    def get_allocator(self): return _gfw.MouseEventList_get_allocator(self)
    def begin(self): return _gfw.MouseEventList_begin(self)
    def end(self): return _gfw.MouseEventList_end(self)
    def rbegin(self): return _gfw.MouseEventList_rbegin(self)
    def rend(self): return _gfw.MouseEventList_rend(self)
    def pop_back(self): return _gfw.MouseEventList_pop_back(self)
    def erase(self, *args): return _gfw.MouseEventList_erase(self, *args)
    def __init__(self, *args): 
        this = _gfw.new_MouseEventList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _gfw.MouseEventList_push_back(self, *args)
    def front(self): return _gfw.MouseEventList_front(self)
    def back(self): return _gfw.MouseEventList_back(self)
    def assign(self, *args): return _gfw.MouseEventList_assign(self, *args)
    def resize(self, *args): return _gfw.MouseEventList_resize(self, *args)
    def insert(self, *args): return _gfw.MouseEventList_insert(self, *args)
    def pop_front(self): return _gfw.MouseEventList_pop_front(self)
    def push_front(self, *args): return _gfw.MouseEventList_push_front(self, *args)
    def reverse(self): return _gfw.MouseEventList_reverse(self)
    __swig_destroy__ = _gfw.delete_MouseEventList
    __del__ = lambda self : None;
MouseEventList_swigregister = _gfw.MouseEventList_swigregister
MouseEventList_swigregister(MouseEventList)



